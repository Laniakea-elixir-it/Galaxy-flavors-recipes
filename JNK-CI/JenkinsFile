pipeline {
	agent { label 'jenkins_wn_1' }
		options { disableConcurrentBuilds() }
	stages {
		stage('tools installation and packages creation') {
			steps {
				withCredentials([file(credentialsId: 'galaxy_it_credentials_mtangaro_general_user', variable: 'OPESTACK_CREDENTIALS')]) {
					sh '''
						set +x $OPENSTACK_CREDENTIALS
						.  $OPESTACK_CREDENTIALS
						git clone https://github.com/Laniakea-elixir-it/TerraFormExpress.git 
						cd TerraFormExpress 
						terraform init
						terraform apply -auto-approve -var="image_name=$IMAGE"
						export VM_IP=$(terraform output -raw public_ip)
						echo $VM_IP
						cd ..
							git clone https://github.com/Laniakea-elixir-it/ansible-role-laniakea-galaxy-tools.git
								cd ansible-role-laniakea-galaxy-tools && git checkout dev && cd ..  
								cd JNK-CI
								sed -i s/VM_IP/$VM_IP/g hosts
								VERSION=$(./packages_vc.sh -c new -f $FLAVOR -d test.db -i $IMAGE -g $GALAXY_RELEASE)
								ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i hosts --private-key /home/centos/.ssh/id_rsa  tools_playbook.yml -e galaxy_flavor=$FLAVOR -e image=$IMAGE
								ansible-playbook -i hosts --private-key /home/centos/.ssh/id_rsa dump.yml -e ansible_python_interpreter=/usr/bin/python -e image=$IMAGE -e galaxy_flavor=$FLAVOR -e galaxy_flavor_version=$VERSION '''
				}

			}
		}
		stage('upload to swift'){
			steps {
				withCredentials([file(credentialsId: 'galaxy_it_credentials_mtangaro_general_user', variable: 'OPENSTACK_CREDENTIALS')]) {
					sh '''
						cd JNK-CI
						cat $OPENSTACK_CREDENTIALS > rc.sh
						ansible-playbook -i hosts --private-key /home/centos/.ssh/id_rsa  swift_upload.yml '''
				}


			}
		}
		stage('delete vm'){
			steps {
				withCredentials([file(credentialsId: 'galaxy_it_credentials_mtangaro_general_user', variable: 'OPENSTACK_CREDENTIALS')]) {
					sh '''
						set +x $OPENSTACK_CREDENTIALS
						.  $OPENSTACK_CREDENTIALS
						cd TerraFormExpress
						terraform destroy -auto-approve -var="image_name=$IMAGE" '''
				}
			}
		}
		stage('upload_to_cvmfs') {
			steps {
				sh'cd JNK-CI && ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i hosts cvmfs_upload.yml'
			}
		}
		stage('write-to-db') {
			steps {
				sh ''' 
					git checkout dev
					./packages_vc.sh -c create -f $FLAVOR -d test.db -i $IMAGE -g $GALAXY_RELEASE
					git add test.db
					git commit -m "update flavor version"
					git push
					''' 
			}
	}
	post { 
		always { 
			cleanWs()
		}
		success {
			withCredentials([string(credentialsId: 'telegram_bot_API_token', variable: 'API_TOKEN')]) {
//				build job: 'package_upload_to_cvmfs'
				sh 'curl -s -X POST https://api.telegram.org/bot$API_TOKEN/sendMessage -d chat_id=-667232678 -d text="Laniakea express package $FLAVOR:$VERSION for $IMAGE build: SUCCESS!!!"'
			}
		}
		failure {
			withCredentials([string(credentialsId: 'telegram_bot_API_token', variable: 'API_TOKEN')]) {
				sh 'curl -s -X POST https://api.telegram.org/bot$API_TOKEN/sendMessage -d chat_id=-667232678 -d text="Laniakea express package $FLAVOR:$VERSION for $IMAGE build: FAILED!!!"'
			}
		}
	}
}


